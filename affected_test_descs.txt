git/rebase can parse progress for long rebase status detects REBASE_HEAD
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved
git/rev-parse isGitRepository should return true for a repository
git/rebase continue with additional changes unrelated to conflicted files returns success
git/status getStatus with unconflicted repo parses changed files
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered
git/rebase detect conflicts status detects REBASE_HEAD
git/diff getBlobImage retrieves valid image for modified file
git/rebase detect conflicts is a detached HEAD state
git/checkout can checkout a valid branch name in an existing repository
git/branch tip returns current branch when on a valid HEAD
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents
git/log getChangedFiles loads the files changed in the commit
git/status getStatus with conflicted repo parses conflicted files without markers
git/branch tip returns non-origin remote
git/rebase can parse progress returns a value indicating conflicts were encountered
git/core error handling throws for errors that were not expected
git/diff getWorkingDirectoryDiff counts lines for staged file
git/rebase abort after conflicts found returns to the feature branch
git/config config returns null for undefined values
git/diff getBinaryPaths in repo with text only files returns an empty array
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit
git/rebase continue after resolving conflicts returns to the feature branch
git/remote findDefaultRemote returns origin when multiple remotes found
git/log getChangedFiles detect copies
git/config global config getGlobalConfigPath gets the config path
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref
git/stash popStashEntry when there are (resolvable) conflicts restores changes and drops stash
GitStore loadCommitBatch includes HEAD when loading commits
patch formatting formatPatchesForModifiedFile includes empty context lines
git/rebase abort after conflicts found no longer has working directory changes
gitignore saveGitIgnore applies rule correctly to repository
git/merge getMergeBase returns the common ancestor of two branches
AppStore can select a repository
git/rebase detect conflicts has conflicted files in working directory
git/status getStatus with unconflicted repo returns an empty array when there are no changes
GitStore undo first commit pre-fills the commit message
GitStore undo first commit has no staged files
GitStore undo first commit clears the undo commit dialog
git/for-each-ref getBranches should return empty list for empty repo
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits
git-lfs isUsingLFS returns true if LFS is tracking a path
git/reflog getRecentBranches returns the recently checked out branches
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules
git/status getStatus with conflicted repo parses resolved files
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context
gitignore appendIgnoreRule appends one rule
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits
git/log getCommits handles repository with HEAD file on disk
git/rev-parse isBareRepository throws error for missing directory
git/stash popStashEntry when there are unresolvable conflicts throws an error
git/stash popStashEntry without any conflicts restores changes back to the working directory
git/reflog getBranchCheckouts returns all branches checked out after a specific date
git/remote findDefaultRemote returns something when origin removed
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF
git/commit index corner cases can commit when a delete is staged and the untracked file exists
git/commit createCommit partials can commit second hunk from modified file
git/rebase detect conflicts returns a value indicating conflicts were encountered
git/rebase continue after resolving conflicts no longer has working directory changes
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing
BranchPruner does not prune reserved branches
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory
GitStore can discard a renamed file
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash
git/core exit code handling throws for exit codes that were not expected
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch
git/reflog getRecentBranches returns a limited number of branches
git/commit createCommit with a merge conflict creates a merge commit
"gitignore readGitIgnoreAtRoot when autocrlf=true and safecrlf=true, appends CRLF to file"
git/config config looks up config values
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state
git/checkout with submodules updates a changed submodule reference
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory
git/reflog getBranchCheckouts returns empty when current branch is orphaned
git/rebase abort after conflicts found REBASE_HEAD is no longer found
git/diff getWorkingDirectoryDiff is empty for a renamed file
git/commit index corner cases can commit when staged new file is then deleted
git/for-each-ref getBranches fetches branches using for-each-ref
"gitignore readGitIgnoreAtRoot when autocrlf=input, appends LF to file"
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file
git/diff getBinaryPaths in repo with image changes returns all changed image files
git/branch getBranchesPointedAt in a local repo finds one branch name
git/core exit code handling does not throw for exit codes that were expected
GitStore repository with HEAD file can discard modified change cleanly
git/status getStatus with conflicted images repo parses conflicted image file on merge
gitignore appendIgnoreRule appends multiple rules
git/commit createCommit normal can commit renames
git/rebase can parse progress for long rebase is a detached HEAD state
git/rebase continue after resolving conflicts branch is now a different ref
git/commit createCommit partials can commit some lines from new file
git/merge merge and is successful returns true
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits
git/status getStatus with conflicted repo parses conflicted files with markers
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing
git/commit createCommit partials can commit multiple hunks from modified file
GitStore undo first commit reports the repository is unborn
git/commit createCommit normal commits the given files
git/submodule listSubmodules returns the expected tag
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected
git/submodule resetSubmodulePaths update submodule to original commit
git/diff getWorkingDirectoryImage retrieves valid image for new file
git/reflog getRecentBranches works after renaming a branch
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected
git/merge merge and is a noop returns false
git/commit createCommit partials can commit renames with partially selected modifications
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD
git/commit createCommit partials can commit some lines from deleted file
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase
git/branch tip returns unborn for new repository
git/diff getWorkingDirectoryDiff/unicode displays unicode characters
git/commit index corner cases file is deleted in index
git/rebase can parse progress is a detached HEAD state
git/log getChangedFiles handles commit when HEAD exists on disk
git/commit createCommit partials can commit single delete from modified file
git/diff getBlobImage retrieves valid images for deleted file
git/diff imageDiff changes for images are set
git/reset reset can hard reset a repository
GitStore can discard changes from a repository
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits
git/diff imageDiff changes for text are not set
git/rebase can parse progress status detects REBASE_HEAD
git/diff getWorkingDirectoryDiff counts lines for modified file
git/git-attributes writeGitAttributes initializes a .gitattributes file
git/branch getBranchesPointedAt in a local repo finds no branch names
git/status getStatus with unconflicted repo reflects renames
BranchPruner prunes for GitHub repository
git/remote getRemotes should return both remotes
git/log getCommits handles repository with signed commit and log.showSignature set
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected
git/log getChangedFiles detects renames
git/rev-parse isGitRepository should return false for a directory
git/for-each-ref getBranches should return empty list for directory without a .git directory
git/core error handling does not throw for errors that were expected
git/rebase continue after resolving conflicts returns success
git/commit createCommit normal commit does not strip commentary by default
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist
git/config global config setGlobalConfigValue will replace all entries for a global value
git-lfs isUsingLFS returns false for repository not using LFS
git/checkout with submodules cleans up an submodule that no longer exists
git/rev-parse isBareRepository returns false for empty directory
git/status getStatus with unconflicted repo returns null for directory without a .git directory
validatedRepositoryPath returns the path to the repository
git/diff getWorkingDirectoryImage retrieves valid images for modified file
BranchPruner does not prune if the last prune date is less than 24 hours ago
git/log getCommits loads history
BranchPruner does nothing on non GitHub repositories
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files
git/commit createMergeCommit with no changes throws an error
git/branch tip returns detached for arbitrary checkout
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete
git/status getStatus with unconflicted repo reflects copies
git/branch tip returns correct ref if checkout occurs
git/checkout will fail when an existing branch matches the remote branch
git/commit createCommit partials can commit renames with modifications
git/rev-parse isBareRepository returns true for initialized bare repository
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file
BranchPruner does not prune if there is no default branch
git/commit createCommit normal can commit for empty repository
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date
git/diff getWorkingDirectoryDiff counts lines for new file
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder
git/checkout can checkout a branch when it exists on multiple remotes
git/submodule listSubmodules returns the submodule entry
git/rev-parse isBareRepository returns false for default initialized repository
